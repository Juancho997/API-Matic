import { Router } from "express";
import { get{{properCase childPluralName}}, get{{properCase childModelName}}ById, post{{properCase childModelName}},
modify{{properCase childModelName}}, delete{{properCase childModelName}} } from
"../controllers/routes/{{childPluralName}}.controllers.js";

const router = Router();


/**
* @swagger
* components:
*   schemas:
*     {{properCase childModelName}}:
*       type: object
*       required:
*         - name
*         - image
*         - description
*         - price
*         - categoryId
*       properties:
*         id:
*           type: UUID
*           description: The autogenerated id of the {{childModelName}}
*         name:
*           type: string
*           description: The name of the {{childModelName}}
*         image:
*           type: string
*           description: The URL of the {{childModelName}}'s image
*         description:
*           type: string
*           description: The {{childModelName}}'s details
*         price:
*           type: integer
*           description: The {{childModelName}}'s price
*         categoryId:
*           type: object
*           description: The referenced instance of the {{properCase parentModelName}} model
*       example:
*         id: 1f562c5e-ce4e-4a26-a62b-011095cb5b97
*         name: Clio V
*         image: https://paultan.org/image/2019/01/2019-Renault-Clio-V-18-e1548815807593-1200x661.jpg
*         description: Clio V
*         price: 150000
*         createdAt: 2022-08-28T00:57:21.248Z
*         updatedAt: 2022-08-28T00:57:21.248Z
*         category: Category Object
*/

/**
* @swagger
* tags:
*   name: {{properCase childPluralName}}
*   description: The {{childPluralName}} managing API
*/

/**
* @swagger
* /{{childPluralName}}:
*   get:
*     summary: Returns the list of all the {{childPluralName}}
*     tags: [{{properCase childPluralName}}]
*     responses:
*       200:
*         description: The list of the {{childPluralName}}
*         content:
*           application/json:
*             schema:
*               type: array
*               items:
*                 $ref: '#/components/schemas/{{properCase childModelName}}'
*       404:
*         description : There are no {{childPluralName}} loaded in the database.
*/

router.get('/', get{{properCase childPluralName}});

/**
* @swagger
* /{{childPluralName}}/{id}:
*    get:
*       summary: Get the {{childModelName}} by id
*       tags: [{{properCase childPluralName}}]
*       parameters:
*         - in: path
*           name: id
*           schema:
*             type: string
*           required: true
*           description: The {{childModelName}}'s id.
*       responses:
*         200:
*           description: The {{childModelName}} description by id.
*           content:
*             application/json:
*               schema:
*                 $ref: '#/components/schemas/{{properCase childModelName}}'
*         404:
*           description: The {{childModelName}} was not found.
*/

router.get('/:id', get{{properCase childModelName}}ById);



/**
* @swagger
* /{{childPluralName}}:
*  post:
*    summary: Create a new {{childModelName}}
*    tags: [{{properCase childPluralName}}]
*    requestBody:
*      required: true
*      content:
*        application/json:
*          schema:
*            $ref: '#/components/schemas/{{properCase childModelName}}'
*    responses:
*      201:
*        description: The {{childModelName}} was successfully created
*        content:
*          application/json:
*            schema:
*              $ref: '#/components/schemas/{{properCase childModelName}}'
*      400:
*        description: All fields must be filled to create the {{childModelName}}
*      405:
*        description: Can not create the {{childModelName}} with that name.
*      500:
*        description: Something on the server went wrong.
*/


router.post('/', post{{properCase childModelName}});


/**
* @swagger
* /{{childPluralName}}/{id}:
*  put:
*    summary: Modify a {{childModelName}}
*    tags: [{{properCase childPluralName}}]
*    parameters:
*      - in: path
*        name: id
*        schema:
*          type: string
*        required: true
*        description: The {{childModelName}}'s id
*    requestBody:
*      required: true
*      content:
*        application/json:
*          schema:
*            $ref: '#/components/schemas/{{properCase childModelName}}'
*    responses:
*      200:
*        description: The {{childModelName}} was succesfully updated
*        content:
*          application/json:
*            schema:
*              $ref: '#/components/schemas/{{properCase childModelName}}'
*      404:
*        description: The {{childModelName}} was not found.
*      500:
*        description: Something on the server went wrong. *
*/


router.put('/:id', modify{{properCase childModelName}});


/**
* @swagger
* /{{childPluralName}}/{id}:
*   delete:
*     summary: Delete a {{childModelName}}
*     tags: [{{properCase childPluralName}}]
*     parameters:
*       - in: path
*         name: id
*         schema:
*           type: string
*         required: true
*         description: The {{childModelName}}'s id
*     responses:
*       200:
*         description: The {{childModelName}} was successfully deleted.
*       404:
*         description: The {{childModelName}} was not found.
*       500:
*         description: Something on the server went wrong. *
*/


router.delete('/:id', delete{{properCase childModelName}});

export default router;