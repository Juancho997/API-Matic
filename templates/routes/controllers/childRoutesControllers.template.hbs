import {{properCase childModelName}} from "../../models/{{properCase childModelName}}.js";
import {{properCase parentModelName}} from "../../models/{{properCase parentModelName}}.js";

export async function get{{properCase childPluralName}}(req, res) {
try {
const all{{properCase childPluralName}} = await {{properCase childModelName}}.findAll({ include: {{properCase
parentModelName}} });

if (all{{properCase childPluralName}}.length === 0) return res.status(404).send({ 'msg': 'No {{childPluralName}} have
been found' });

return res.send(all{{properCase childPluralName}});
} catch (error) {
console.error(error);
}
};


export async function get{{properCase childModelName}}ById(req, res) {
const { id } = req.params;
try {

const found{{properCase childModelName}} = await {{properCase childModelName}}.findOne({
include: {{properCase parentModelName}},
where: { id: id }
});

if (!found{{properCase childModelName}}) return res.status(404).send({ error: `There are no {{properCase
childPluralName}} with the id : ${id}` });

return res.send(found{{properCase childModelName}});

} catch (error) {
console.error(error)
}
};


export async function post{{properCase childModelName}}(req, res) {
const { name, image, description, price, {{parentModelName}}Id } = req.body;

try {

const {{childModelName}}WithSameName = await {{properCase childModelName}}.findOne({
where: {
name: name
}
});

if ({{properCase childModelName}}WithSameName) return res.status(405).send({ error: `There's already a
{{childModelName}} with that name` });

if (!name || !image || !description || !price || !{{parentModelName}}Id) return res.status(400).send({ error: "Must
provide all required fields" });


const new{{properCase childModelName}} = await {{properCase childModelName}}.create({ name, image, description, price,
{{parentModelName}}Id });
return res.status(201).send(new{{properCase childModelName}});

} catch (error) {
console.error(error)
}
};

export async function modify{{properCase childModelName}}(req, res) {
const { id } = req.params;
const { body } = req;
try {
const found{{properCase childModelName}} = await {{properCase childModelName}}.findByPk(id);

if (!found{{properCase childModelName}}) return res.status(404).send({ error: `There are no {{properCase
childPluralName}} with the id : ${id}` });

await {{properCase childModelName}}.update(body, { where: { id: id } });
const updated{{properCase childModelName}} = await {{properCase childModelName}}.findByPk(id);

return res.send(updated{{properCase childModelName}});
} catch (error) {
console.error(error)
}
};

export async function delete{{properCase childModelName}}(req, res) {

const { id } = req.params;
try {
const found{{properCase childModelName}} = await {{properCase childModelName}}.findByPk(id);

if (!found{{properCase childModelName}}) return res.status(404).send({ error: `There are no {{properCase
childPluralName}} with the id : ${id}` });

await {{properCase childModelName}}.destroy({ where: { id: id } });

return res.status(200).send({ msg: `{{properCase childModelName}} ${found{{properCase childModelName}}.name} - id :
${id} deleted` });

} catch (err) {
console.log(err)
}

};