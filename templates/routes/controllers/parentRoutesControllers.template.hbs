import {{properCase parentModelName}} from "../../models/{{properCase parentModelName}}.js";
import {{properCase childModelName}} from "../../models/{{properCase childModelName}}.js";

export async function get{{properCase parentPluralName}}(req, res) {
try {
const all{{properCase parentPluralName}} = await {{properCase parentModelName}}.findAll();

if (all{{properCase parentPluralName}}.length === 0) return res.status(404).send({ 'msg': 'No {{parentPluralName}} have been found' });

return res.send(all{{properCase parentPluralName}});
} catch (error) {
console.error(error);
}
};


export async function get{{properCase parentModelName}}ById(req, res) {
const { id } = req.params;
try {
const found{{properCase parentModelName}} = await {{properCase parentModelName}}.findByPk(id, { include: {{properCase childModelName}} });

if (!found{{properCase parentModelName}}) return res.status(404).send({ error: `There are no {{properCase parentPluralName}} with the id : ${id}` });

return res.send(found{{properCase parentModelName}});

} catch (error) {
console.error(error)
}
};

export async function post{{properCase parentModelName}}(req, res) {
const { name } = req.body;

try {

const {{parentModelName}}WithSameName = await {{properCase parentModelName}}.findOne({
where: {
name: name
}
});

if (!name) return res.status(400).send({ error: "Must provide all the required fields" });

if ({{parentModelName}}WithSameName) return res.status(405).send({ error: `There's already a {{parentModelName}} with that name` });

const new{{properCase parentModelName}} = await {{properCase parentModelName}}.create({ name });
return res.status(201).send(new{{properCase parentModelName}});
} catch (error) {
console.error(error)
}
};

export async function modify{{properCase parentModelName}}(req, res) {
const { id } = req.params;
const { body } = req;
try {
const found{{properCase parentModelName}} = await {{properCase parentModelName}}.findByPk(id);

if (!found{{properCase parentModelName}}) return res.status(404).send({ error: `There are no {{properCase parentPluralName}} with the id : ${id}` });

await {{properCase parentModelName}}.update(body, { where: { id: id } });
const updated{{properCase parentModelName}} = await {{properCase parentModelName}}.findByPk(id);

return res.send(updated{{properCase parentModelName}});
} catch (error) {
console.error(error)
}
};

export async function delete{{properCase parentModelName}}(req, res) {

const { id } = req.params;
try {
const found{{properCase parentModelName}} = await {{properCase parentModelName}}.findByPk(id);

if (!found{{properCase parentModelName}}) return res.status(404).send({ error: `There are no {{parentPluralName}} with the id : ${id}` });

await {{properCase parentModelName}}.destroy({ where: { id: id } });

return res.status(200).send({ msg: `{{properCase parentModelName}} ${found{{properCase parentModelName}}.name} - id : ${id} deleted` });

} catch (err) {
console.log(err)
}

};