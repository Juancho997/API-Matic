import { Router } from "express";
import { get{{properCase parentPluralName}}, get{{properCase parentModelName}}ById, post{{properCase parentModelName}},
modify{{properCase parentModelName}}, delete{{properCase parentModelName}} } from
'../controllers/routes/{{parentPluralName}}.controllers.js';

const router = Router();

/**
* @swagger
* components:
*   schemas:
*     {{properCase parentModelName}}:
*       type: object
*       required:
*         - name
*         - createdAt
*         - updatedAt
*       properties:
*         id:
*           type: UUID
*           description: The autogenerated id of the {{parentModelName}}
*         name:
*           type: string
*           description: The name of the {{parentModelName}}
*         createdAt:
*           type: date
*           description: Timestamp automatically created by Sequelize representing the {{parentModelName}}'s moment of creation
*         updatedAt:
*           type: date
*           description: Timestamp automatically created by Sequelize representing the {{parentModelName}}'s latest update
*       example:
*         id: 55e26c8f-4f0e-42d2-b096-71f856f5a3ed
*         name: Cars
*         updatedAt: 2022-08-28T21:43:51.000Z
*         createdAt: 2022-08-28T21:43:51.000Z
*/

/**
* @swagger
* tags:
*   name: {{properCase parentPluralName}}
*   description: The {{parentPluralName}} managing API
*/

/**
* @swagger
* /{{parentPluralName}}:
*   get:
*     summary: Returns the list of all the {{parentPluralName}}
*     tags: [{{properCase parentPluralName}}]
*     responses:
*       200:
*         description: The list of the {{parentPluralName}}
*         content:
*           application/json:
*             schema:
*               type: array
*               items:
*                 $ref: '#/components/schemas/{{properCase parentModelName}}'
*       404:
*         description: There are no {{parentPluralName}} loaded in the database
*
*/


router.get('/', get{{properCase parentPluralName}});


/**
* @swagger
* /{{parentPluralName}}/{id}:
*  get:
*    summary: Get the {{parentModelName}} by id and the {{childPluralName}} belonging to it
*    tags: [{{properCase parentPluralName}}]
*    parameters:
*      - in: path
*        name: id
*        schema:
*          type: string
*        required: true
*        description: The {{parentModelName}}'s id.
*    responses:
*      200:
*        description: The {{parentModelName}} description by id and it's {{childPluralName}}
*        content:
*          application/json:
*            schema:
*              $ref: '#/components/schemas/{{properCase parentModelName}}'
*      404:
*        description: The {{parentModelName}} was not found.
*/


router.get('/:id', get{{properCase parentModelName}}ById);


/**
* @swagger
* /{{parentPluralName}}:
*  post:
*    summary: Create a new {{parentModelName}}
*    tags: [{{properCase parentPluralName}}]
*    requestBody:
*      required: true
*      content:
*        application/json:
*          schema:
*            $ref: '#/components/schemas/{{properCase parentModelName}}'
*    responses:
*      201:
*        description: The {{parentModelName}} was successfully created
*        content:
*          application/json:
*            schema:
*              $ref: '#/components/schemas/{{properCase parentModelName}}'
*      400:
*        description: All fields must be filled to create the {{parentModelName}}
*      405:
*        description: Can not create the {{parentModelName}} with that name.
*      500:
*        description: Something on the server went wrong.
*/

router.post('/', post{{properCase parentModelName}});


/**
* @swagger
* /{{parentPluralName}}/{id}:
*  put:
*    summary: Modify a {{parentModelName}}
*    tags: [{{properCase parentPluralName}}]
*    parameters:
*      - in: path
*        name: id
*        schema:
*          type: string
*        required: true
*        description: The {{parentModelName}}'s id
*    requestBody:
*      required: true
*      content:
*        application/json:
*          schema:
*            $ref: '#/components/schemas/{{properCase parentModelName}}'
*    responses:
*      200:
*        description: The {{parentModelName}} was succesfully updated
*        content:
*          application/json:
*            schema:
*              $ref: '#/components/schemas/{{properCase parentModelName}}'
*      404:
*        description: The {{parentModelName}} was not found.
*      500:
*        description: Something on the server went wrong. *
*/


router.put('/:id', modify{{properCase parentModelName}});

/**
* @swagger
* /{{parentPluralName}}/{id}:
*   delete:
*     summary: Delete a {{parentModelName}}
*     tags: [{{properCase parentPluralName}}]
*     parameters:
*       - in: path
*         name: id
*         schema:
*           type: string
*         required: true
*         description: The {{parentModelName}}'s id
*     responses:
*       200:
*         description: The {{parentModelName}} was successfully deleted.
*       404:
*         description: The {{parentModelName}} was not found.
*       500:
*         description: Something on the server went wrong. *
*/


router.delete('/:id', delete{{properCase parentModelName}});

export default router;